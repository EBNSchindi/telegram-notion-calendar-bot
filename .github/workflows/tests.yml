name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov
    
    - name: Create test environment
      run: |
        cat > .env.test << EOF
        TELEGRAM_BOT_TOKEN=test_bot_token
        OPENAI_API_KEY=test_openai_key
        DEBUG=true
        LOG_LEVEL=DEBUG
        EOF
    
    - name: Run unit tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd):$(pwd)/src"
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing -m "not integration"
    
    - name: Run integration tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd):$(pwd)/src"
        pytest tests/ -v -m "integration"
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Generate test report
      if: always()
      run: |
        pytest tests/ --junit-xml=test-results.xml || true
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: test-results.xml

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy isort
    
    - name: Run Black
      run: |
        black --check src/ tests/
    
    - name: Run isort
      run: |
        isort --check-only src/ tests/
    
    - name: Run Flake8
      run: |
        flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503
    
    - name: Run MyPy
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -ll -i
    
    - name: Check for vulnerable dependencies
      run: |
        pip install -r requirements.txt
        safety check --json

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t telegram-notion-bot:test .
    
    - name: Test Docker image
      run: |
        docker run --rm telegram-notion-bot:test python --version